Vacancy_rate <- ts(data$vacancy_rate, start = c(1991, 1), frequency = 12)
plot(Vacancy_rate)
#Começamos pelo modelo mais completo:
teste_1 = CADFtest(Vacancy_rate, type = "trend",
max.lag.y = ceiling(12*(length(Vacancy_rate)/100)^(1/4)), #definição do lag ótimo para teste de Dickey-Fuller
criterion = "MAIC") #avaliação da especificação do modelo
summary(teste_1)
print(teste_1)
print(teste_1$est.model)
linearHypothesis(teste_1$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste_2 = CADFtest(Vacancy_rate, type = "drift", max.lag.y = ceiling(12*(length(Vacancy_rate)/100)^(1/4)),
criterion = "MAIC")
print(teste_2)
summary(teste_2)
print(teste_2$est.model)
linearHypothesis(teste_2$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
print(teste_1$est.model)
linearHypothesis(teste_1$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste_2 = CADFtest(Vacancy_rate, type = "drift", max.lag.y = ceiling(12*(length(Vacancy_rate)/100)^(1/4)),
criterion = "MAIC")
print(teste_2)
summary(teste_2)
print(teste_2$est.model)
linearHypothesis(teste_2$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
teste_3 = CADFtest(Vacancy_rate, type = "none",
max.lag.y = ceiling(12*(length(Vacancy_rate)/100)^(1/4)),
criterion = "MAIC")
print(teste_3)
summary(teste_3)
trend = 1:(length(Vacancy_rate)-1)
modelo = lm(diff(Vacancy_rate)~trend)
coeftest(modelo, vcov. = vcovHAC)
u <- mutate(data, u_star = sqrt((data$vacancy_rate*data$Unemployment_rate)))
u <- mutate(data, u_star = sqrt((data$vacancy_rate*data$Unemployment_rate)))
u_ts <- ts(u$u_star, start = c(1991,1), frequency = 12)
plot(u_ts)
View(u)
plot(u$vacancy_rate)
plot(u$Unemployment_rate)
u_ts <- ts(u$u_star, start = c(1991,1), frequency = 12)
plot(u_ts)
janela_testes <- window(u_ts, end = c(2002,12))
plot(janela_testes)
#Começamos pelo modelo mais completo:
teste_4 = CADFtest(janela_testes, type = "trend",
max.lag.y = ceiling(12*(length(janela_testes)/100)^(1/4)), #definição do lag ótimo para teste de Dickey-Fuller
criterion = "MAIC") #avaliação da especificação do modelo
summary(teste_4)
print(teste_4)
print(teste_4$est.model)
linearHypothesis(teste_4$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste_5 = CADFtest(janela_testes, type = "drift", max.lag.y = ceiling(12*(length(janela_testes)/100)^(1/4)),
criterion = "MAIC")
print(teste_5)
summary(teste_5)
print(teste_5)
summary(teste_5)
print(teste_5)
print(teste_5$est.model)
linearHypothesis(teste_5$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
teste_6 = CADFtest(janela_testes, type = "none",
max.lag.y = ceiling(12*(length(janela_testes)/100)^(1/4)),
criterion = "MAIC")
print(teste_6)
print(teste_6)
summary(teste_6)
trend = 1:(length(janela_testes)-1)
modelo = lm(diff(janela_testes)~trend)
coeftest(modelo, vcov. = vcovHAC)
summary(modelo)
coeftest(modelo, vcov. = vcovHAC)
plot(diff(janela_testes))
plot(modelo$residuals)
plot(ts(modelo$residuals, end = c(2002,12)))
plot(ts(modelo$residuals, end = c(2002,12), frequency = 12))
plot(diff(janela_testes))
teste_4 = CADFtest(u_ts, type = "trend",
max.lag.y = ceiling(12*(length(u_ts)/100)^(1/4)), #definição do lag ótimo para teste de Dickey-Fuller
criterion = "MAIC") #avaliação da especificação do modelo
summary(teste_4)
print(teste_4)
#O teste t NÃO rejeita a hipótese nula de uma raiz unitária, a 10% (p-valor é de 0.2137 > 0.10)
# Caímos no item 1.2. do slide 16:
# Se não rejeitamos a hipótese nula, fazemos o teste F da nula (β, γ) = (0, 0),
#usando os valores críticos do slide 11 (Caso 4).
# Teste F-----------------------------------------------------------------------
#Objetivo: detectar se o modelo de fato apresenta tendência linear
print(teste_4$est.model)
linearHypothesis(teste_4$est.model,c("trnd = 0", "L(y, 1) = 0" ))
# A estatística F é de 4.2187.
# Usando o Caso 4 da tabela na página 11 dos slides,
#vemos que, a 10% de significância,o valor crítico para 408 observações é 5.36.
# Como F < 5.47, NÃO rejeitamos a hipótese nula de que
#a tendência e o coeficiente associado a y_{t-1} são ambos zero.
# Conclusão: modelo não apresenta tendência linear.
# Caímos no caso 1.2.1, do slide 16.
# Nesse caso, vamos para o modelo somente com intercepto.
# Procedimento Sequencial II, slide 17------------------------------------------
# Modelo apenas com intercepto--------------------------------------------------
# Se chegamos a esta etapa, não temos evidências de que haja uma
#tendência linear no modelo.
teste_5 = CADFtest(u_ts, type = "drift", max.lag.y = ceiling(12*(length(u_ts)/100)^(1/4)),
criterion = "MAIC")
print(teste_5)
summary(teste_5)
#O teste t NÃO rejeita a hipótese nula de uma raiz unitária, a 10%
#(p-valor é de 0.1787 > 0.10)
# Caímos no caso 2.2., do slide 17:
# Se não rejeitamos a hipótese nula, fazemos o teste F da nula (α, γ) = (0, 0),
#usando os valores críticos do slide 11 (Caso 2).
# Teste F-----------------------------------------------------------------------
#Objetivo: detectar se o modelo de fato apresenta intercepto.
print(teste_5$est.model)
linearHypothesis(teste_5$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
# A estatística F é de 2.6021
# Usando o Caso 2 da tabela da página 11 dos slides,
# a 10% de significância, para 408 observações, o valor crítico é 3.79.
# Como F < 3.86, NÃO REJEITAMOS a hipótese nula
# de que o intercepto e o coeficiente associado a y_{t-1} são ambos zero
#(alfa e gama, respectivamente).
# Caímos no caso 2.2.1, do slide 17:
# Se não rejeitamos a hipótese nula do teste F, concluímos que o modelo não
#apresenta intercepto. Nesse caso, vamos à etapa 3.
# Procedimento Sequencial III---------------------------------------------------
# Modelo sem componentes determinísticos
# Se chegamos a essa etapa, não temos evidências de que haja uma
#tendência linear no modelo nem um intercepto.
# Testamos a nula de H0 : γ = 0 contra a alternativa de que H1 : γ < 0
#usando a estatística t chapéu e os valores críticos não normais para esse caso
#(slide 10, caso 1).
teste_6 = CADFtest(u_ts, type = "none",
max.lag.y = ceiling(12*(length(u_ts)/100)^(1/4)),
criterion = "MAIC")
print(teste_6)
summary(teste_6)
# O teste t NÃO rejeita a hipótese nula de H0 : γ = 0,
#a 10% (p-valor é de 0.6114 > 0.10).
# Caímos no caso 3.2, do slide 18:
# Se não rejeitamos a nula, concluímos que a série apresenta UMA raiz unitária.
## Componentes determinísticos--------------------------------------------------
# Vamos testar a presença de componentes determinísticos.
# Como os dados apresentam tendência estocástica,
#trabalhamos com a série diferenciada
trend = 1:(length(u_ts)-1)
modelo = lm(diff(u_ts)~trend)
coeftest(modelo, vcov. = vcovHAC)
plot(diff(u_ts))
plot(ts(modelo$residuals, end = c(2002, 12), frequency = 12))
#Dos testes anteriores, sabemos que a série apresenta raiz unitária, e de:
trend = 1:(length(u_ts)-1)
regg = lm(diff(u_ts)~trend)
coeftest(regg, vcov. = vcovHAC)
trend = 1:(length(u_ts)-1)
modelo = lm(diff(u_ts)~trend)
coeftest(modelo, vcov. = vcovHAC)
residuals_model <- residuals(modelo)
residuals_df <- data.frame(
residuals = residuals_model
)
residuals_ts <- ts(residuals_model, start = c(1991,1), frequency = 12)
plot(residuals_ts)
# Até 2002:
janela_residuals <- window(residuals_ts, end = c(2002,12))
acf((janela_residuals), lag.max = 60)
pacf((janela_residuals), lag.max = 60)
acf(diff(u_ts), lag.max = 60)
acf(diff(u_ts), lag.max = 60)
plot(diff(u_ts))
pacf(window(diff(u_ts), end = c(2002,12)), lag.max = 60)
pacf((janela_residuals), lag.max = 60)
acf(window(diff(u_ts), end = c(2002,12)), lag.max=60)
acf((janela_residuals), lag.max = 60)
acf((janela_residuals), lag.max = 60)
janela_u <- window(u_ts, end = c(2002,12))
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, pseas_max = spmax, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
library(parallel)
#qmax: ordem máxima da parte MA a ser testada
#d: ordem de integração
#pseas_max: ordem máxima do AR sazonal a ser testado
#qseas_max: ordem máxima do MA sazonal a ser testado
#Dseas: ordem de integração sazonal
#include.constant: incluir intercepto no modelo ARIMA (em diferença se d>0)?
#include.trend: incluir tendência no modelo ARIMA (em diferença se d>0)?
#signif: nível de significância para testar significância dos coeficientes
#lags.lbox: vetor com número de defasagens para os testes de Ljung-Box
#cores: número de processos paralelos a serem executados
arima.est.parallel <- function(data_raw, pmax, qmax, d, pseas_max= 0, qseas_max = 0, Dseas = 0,  include.constant = T, include.trend = F,signif = 0.10, lags.lbox = 20,
cores = detectCores())
{
mmd = expand.grid(0:pmax, d, 0:qmax, 0:pseas_max,Dseas, 0:qseas_max)
cluster = makeCluster(cores)
msd = parApply(cl = cluster, X = mmd, MARGIN = 1, FUN = bx.line,  data_raw = data_raw, include.constant= include.constant,
include.trend = include.trend, signif = signif, lags.lbox = lags.lbox)
#msd = apply(mmd, MARGIN = 1, FUN = bx.line, data_raw = data_raw, include.constant= include.constant,
#        include.trend = include.trend, signif = signif, lags.lbox = lags.lbox)
tabla = do.call(rbind, msd)
keeper = c(pmax>0, qmax>0, pseas_max>0, qseas_max>0, rep(T, ncol(tabla)-4))
tabla = tabla[,keeper]
stopCluster(cluster)
return(tabla)
}
bx.line <- function(order, data_raw, include.constant, include.trend, signif, lags.lbox)
{
library(forecast)
library(tseries)
raw = as.numeric(order[1:3])
seas = as.numeric(order[4:6])
#print(seas)
modelo = tryCatch({Arima(data_raw,order =raw, seasonal = seas, include.constant = include.constant,
include.drift = include.trend) }, error  = function(e){
#warning(e)
return(NULL)
})
if(!is.null(modelo))
{
if(raw[1]+seas[1] > 0)
{
if(T %in% (abs(polyroot(c(1,-1*modelo$model$phi))) <= 1))
estacionario = "Não é estacionário" else
estacionario = "É estacionário"
} else estacionario = "Não se aplica"
if(raw[3]+seas[3] > 0)
{
if(T %in% (abs(polyroot(c(1,modelo$model$theta))) <= 1))
invertivel = "Não é invertível" else
invertivel = "É invertível"
} else invertivel = "Não se aplica"
lb = sapply(lags.lbox, function(x) Box.test(modelo$residuals, lag = x, type = "Ljung-Box", fitdf = raw[1]+raw[3]+seas[1]+seas[3])$p.value)
jb = jarque.bera.test(modelo$residuals)$p.value
linha = data.frame("p"=raw[1], "q"=raw[3], 'sa_p' =seas[1], 'sa_q' = seas[3], "Não significantes" =
paste(names(modelo$coef)[abs(modelo$coef/sqrt(diag(modelo$var.coef)))<=qnorm(1-signif/2)],
collapse = " ; "),"AIC" = AIC(modelo), "BIC" = BIC(modelo),
"Estacionariedade" = estacionario, "Invertibilidade" = invertivel,
"p-valor LB" = paste(lags.lbox, ": ", lb,sep="",collapse="; "),
'p-valor JB' = jb,
"Nobs" = nobs(modelo),
"Converged"= modelo$code==0)
} else  linha = data.frame("p"=raw[1], "q"=raw[3], 'sa_p' =seas[1], 'sa_q' = seas[3], "Não significantes" =
NA,"AIC" = NA, "BIC" = NA,
"Estacionariedade" = NA, "Invertibilidade" = NA,
"p-valor LB" = NA,
"p-valor JB" = NA,
"Nobs" = NA,
"Converged"= FALSE)
return(linha)
}
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, pseas_max = spmax, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
#Removendo modelos que não convergiram
tabela = tabela[tabela$Converged,]
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, pseas_max = spmax, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
spmax = 0 #Verificar !!!!
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, pseas_max = spmax, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
#Sendo conservador, da inspeção visual da FAC e FACP, incluímos, na parte não sazonal:
pmax = 4
qmax = 3
spmax = 0 #Verificar !!!!
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
#Removendo modelos que não convergiram
tabela = tabela[tabela$Converged,]
View(tabela)
View(tabela)
library(readxl)
data <- read_excel("GitHub/Trabalho_Metri_3/data.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
View(data)
# Instalando pacotes------------------------------------------------------------
# Tidyverse
#install.packages("tidyverse")
library(tidyverse)
#Instalando pacotes para decompor e dessazonalizar
#install.packages("seasonal")
library(seasonal) #Arima X13-Seats
#install.packages("mFilter")
library(mFilter) #Filtro HP
#Carregando dados disponíveis no pacote URCA
#install.packages("urca")
library("urca")
#install.packages("forecast")
library(forecast)
#install.packages("sandwich")
library(sandwich) #Erros padrão HAC
#install.packages("lmtest")
library(lmtest) #Testes com erros padrão robustos
#install.packages("CADFtest")
library("CADFtest") # testes de raiz unitária
#install.packages("sandwich")
library("sandwich") #Erros padrão HAC
#install.packages("car")
library("car") #Teste de restrições lineares
# Setting work directory
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)%>%
#gsub("\\Short version", "", .)
# Ex.2.-------------------------------------------------------------------------
# Importing dataset with relevant data from OECD and Destatis.
# Building variable vacancy rate as the ratio between job vacancies and EAP.
Setting work directory (Github)-----------------------------------------------
# Setting work directory
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
file_path <- paste0(file_directory, "data", ".xlsx")
load(file_path)
file_path <- paste0(file_directory, "data.xlsx")
load(file_path)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
file_path <- paste0(file_directory, "data", ".xlsx")
load(file_path)
file_path <- paste0(file_directory/, "data", ".xlsx")
load(file_path)
setwd(file_directory)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
file_path <- paste0(file_directory, "/", "data", ".xlsx")
load(file_path)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
file_path <- paste0(file_directory, "/", "data", ".xlsx")
load(file_path)
read_xlsx(file_path)
fread(file_path)
read_xlsx(file_path)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
getwd()
library(readxl)
data <- read_excel("data.xlsx", col_types = c("text",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric"))
View(data)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
getwd()
file_path <- paste0(folder_path, "/", "data", ".xlsx")
file_path <- paste0(file_directory, "/", "data", ".xlsx")
data <- read_excel(file_path, col_types = c("text",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric"))
data <- read_excel(file_path, col_types = c("text",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric"))
data <- read_excel(file_path, col_types = c("text",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric"))
data$vacancy_rate <- 100*data$Vacancies_mill / data$EAP_mill
View(data)
Vacancy_rate <- ts(data$vacancy_rate, start = c(1991, 1), frequency = 12)
plot(Vacancy_rate)
u <- mutate(data, u_star = sqrt((data$vacancy_rate*data$Unemployment_rate)))
u_ts <- ts(u$u_star, start = c(1991,1), frequency = 12)
plot(u_ts)
#Começamos pelo modelo mais completo:
teste_4 = CADFtest(u_ts, type = "trend",
max.lag.y = ceiling(12*(length(u_ts)/100)^(1/4)), #definição do lag ótimo para teste de Dickey-Fuller
criterion = "MAIC") #avaliação da especificação do modelo
summary(teste_4)
print(teste_4)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
getwd()
file_path <- file.path(file_directory, "data.xlsx")
data <- read_excel(file_path)
View(data)
class(data$Vacancies_mill)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_directory)
getwd()
file_path <- file.path(file_directory, "data.xlsx")
data <- read_excel(file_path)
View(data)
data$vacancy_rate <- 100*data$Vacancies_mill / data$EAP_mill
Vacancy_rate <- ts(data$vacancy_rate, start = c(1991, 1), frequency = 12)
plot(Vacancy_rate)
library(readxl)
data <- read_excel("data.xlsx", col_types = c("text",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric"))
View(data)
data$vacancy_rate <- 100*data$Vacancies_mill / data$EAP_mill
Vacancy_rate <- ts(data$vacancy_rate, start = c(1991, 1), frequency = 12)
plot(Vacancy_rate)
u <- mutate(data, u_star = sqrt((data$vacancy_rate*data$Unemployment_rate)))
u_ts <- ts(u$u_star, start = c(1991,1), frequency = 12)
plot(u_ts)
#Começamos pelo modelo mais completo:
teste_4 = CADFtest(u_ts, type = "trend",
max.lag.y = ceiling(12*(length(u_ts)/100)^(1/4)), #definição do lag ótimo para teste de Dickey-Fuller
criterion = "MAIC") #avaliação da especificação do modelo
summary(teste_4)
print(teste_4)
print(teste_4$est.model)
linearHypothesis(teste_4$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste_5 = CADFtest(u_ts, type = "drift", max.lag.y = ceiling(12*(length(u_ts)/100)^(1/4)),
criterion = "MAIC")
print(teste_5)
summary(teste_5)
print(teste_5$est.model)
linearHypothesis(teste_5$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
teste_6 = CADFtest(u_ts, type = "none",
max.lag.y = ceiling(12*(length(u_ts)/100)^(1/4)),
criterion = "MAIC")
print(teste_6)
summary(teste_6)
trend = 1:(length(u_ts)-1)
modelo = lm(diff(u_ts)~trend)
coeftest(modelo, vcov. = vcovHAC)
janela_u <- window(u_ts, end = c(2002,12))
acf(window(diff(u_ts), end = c(2002,12)), lag.max=60)
pacf(window(diff(u_ts), end = c(2002,12)), lag.max=60)
u_ts <- ts(u$u_star, start = c(1991,1), frequency = 12)
janela_u <- window(u_ts, end = c(2002,12))
acf(window(diff(u_ts), end = c(2002,12)), lag.max=60)
pacf(window(diff(u_ts), end = c(2002,12)), lag.max=60)
#Sendo conservador, da inspeção visual da FAC e FACP, incluímos, na parte não sazonal:
pmax = 4
qmax = 3
spmax = 0 #Verificar !!!!
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
#Removendo modelos que não convergiram
tabela = tabela[tabela$Converged,]
library(parallel)
#qmax: ordem máxima da parte MA a ser testada
#d: ordem de integração
#pseas_max: ordem máxima do AR sazonal a ser testado
#qseas_max: ordem máxima do MA sazonal a ser testado
#Dseas: ordem de integração sazonal
#include.constant: incluir intercepto no modelo ARIMA (em diferença se d>0)?
#include.trend: incluir tendência no modelo ARIMA (em diferença se d>0)?
#signif: nível de significância para testar significância dos coeficientes
#lags.lbox: vetor com número de defasagens para os testes de Ljung-Box
#cores: número de processos paralelos a serem executados
arima.est.parallel <- function(data_raw, pmax, qmax, d, pseas_max= 0, qseas_max = 0, Dseas = 0,  include.constant = T, include.trend = F,signif = 0.10, lags.lbox = 20,
cores = detectCores())
{
mmd = expand.grid(0:pmax, d, 0:qmax, 0:pseas_max,Dseas, 0:qseas_max)
cluster = makeCluster(cores)
msd = parApply(cl = cluster, X = mmd, MARGIN = 1, FUN = bx.line,  data_raw = data_raw, include.constant= include.constant,
include.trend = include.trend, signif = signif, lags.lbox = lags.lbox)
#msd = apply(mmd, MARGIN = 1, FUN = bx.line, data_raw = data_raw, include.constant= include.constant,
#        include.trend = include.trend, signif = signif, lags.lbox = lags.lbox)
tabla = do.call(rbind, msd)
keeper = c(pmax>0, qmax>0, pseas_max>0, qseas_max>0, rep(T, ncol(tabla)-4))
tabla = tabla[,keeper]
stopCluster(cluster)
return(tabla)
}
bx.line <- function(order, data_raw, include.constant, include.trend, signif, lags.lbox)
{
library(forecast)
library(tseries)
raw = as.numeric(order[1:3])
seas = as.numeric(order[4:6])
#print(seas)
modelo = tryCatch({Arima(data_raw,order =raw, seasonal = seas, include.constant = include.constant,
include.drift = include.trend) }, error  = function(e){
#warning(e)
return(NULL)
})
if(!is.null(modelo))
{
if(raw[1]+seas[1] > 0)
{
if(T %in% (abs(polyroot(c(1,-1*modelo$model$phi))) <= 1))
estacionario = "Não é estacionário" else
estacionario = "É estacionário"
} else estacionario = "Não se aplica"
if(raw[3]+seas[3] > 0)
{
if(T %in% (abs(polyroot(c(1,modelo$model$theta))) <= 1))
invertivel = "Não é invertível" else
invertivel = "É invertível"
} else invertivel = "Não se aplica"
lb = sapply(lags.lbox, function(x) Box.test(modelo$residuals, lag = x, type = "Ljung-Box", fitdf = raw[1]+raw[3]+seas[1]+seas[3])$p.value)
jb = jarque.bera.test(modelo$residuals)$p.value
linha = data.frame("p"=raw[1], "q"=raw[3], 'sa_p' =seas[1], 'sa_q' = seas[3], "Não significantes" =
paste(names(modelo$coef)[abs(modelo$coef/sqrt(diag(modelo$var.coef)))<=qnorm(1-signif/2)],
collapse = " ; "),"AIC" = AIC(modelo), "BIC" = BIC(modelo),
"Estacionariedade" = estacionario, "Invertibilidade" = invertivel,
"p-valor LB" = paste(lags.lbox, ": ", lb,sep="",collapse="; "),
'p-valor JB' = jb,
"Nobs" = nobs(modelo),
"Converged"= modelo$code==0)
} else  linha = data.frame("p"=raw[1], "q"=raw[3], 'sa_p' =seas[1], 'sa_q' = seas[3], "Não significantes" =
NA,"AIC" = NA, "BIC" = NA,
"Estacionariedade" = NA, "Invertibilidade" = NA,
"p-valor LB" = NA,
"p-valor JB" = NA,
"Nobs" = NA,
"Converged"= FALSE)
return(linha)
}
#Sendo conservador, da inspeção visual da FAC e FACP, incluímos, na parte não sazonal:
pmax = 4
qmax = 3
spmax = 0 #Verificar !!!!
tabela = arima.est.parallel(janela_u, pmax, qmax, d=1, include.constant = F, include.trend = F,
signif = 0.1, lags.lbox = c(20,30))
#Removendo modelos que não convergiram
tabela = tabela[tabela$Converged,]
View(tabela)
